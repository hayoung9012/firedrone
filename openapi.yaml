openapi: 3.1.0
info:
  title: Drone Monitoring Backend API
  version: "1.1.0"
  description: |
    프론트 대시보드(상태·지도·그래프)와 DB(고도·배터리·탐지로그) 흐름에 맞춘 백엔드 API.
    - 시간: ISO 8601 UTC (예: 2025-10-08T12:34:56.789Z)
    - 단위: gas=ppm, temp(=IR)=°C, altitude=m, battery=%
servers:
  - url: http://localhost:8000
    description: Local server

tags:
  - name: Ingest
    description: 젯슨/드론 → 서버 데이터 적재
  - name: Status
    description: 대시보드 실시간 상태/히스토리 조회
  - name: Fire
    description: 화재 알림/로그
  - name: Action
    description: 수동 제어(투하)
  - name: System
    description: 헬스체크/보안

paths:
  /api/status:
    get:
      tags: [Status]
      summary: 최신 상태 1건 조회 (대시보드 카드/차트용)
      description: 프론트 실시간 갱신(2~3초 폴링). 프론트 ‘센서 카드/차트’와 매칭.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        "503":
          description: 드론 연결 끊김
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example:
                  value:
                    status: error
                    message: "드론 연결 끊김"
                    timestamp: "2025-10-08T12:34:56.789Z"
    post:
      tags: [Ingest]
      summary: 상태 수집(젯슨→서버 적재)
      description: 젯슨/드론이 주기적으로 상태를 업로드하면 서버가 DB에 INSERT. (간단 API 키 권장)
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatusIngest"
      responses:
        "200":
          description: 저장 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ok"

  /api/status/history:
    get:
      tags: [Status]
      summary: 상태 히스토리 조회 (최근 N건/기간)
      description: 프론트의 ‘최근 50건 조회’ 버튼과 테이블에 매칭. 기본 최신순, limit로 개수 제어.
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, default: 50, maximum: 1000 }
          description: 조회 개수(기본 50)
        - in: query
          name: from
          schema: { type: string, format: date-time }
          description: 시작 시각(옵션)
        - in: query
          name: to
          schema: { type: string, format: date-time }
          description: 종료 시각(옵션)
        - in: query
          name: cursor
          schema: { type: string }
          description: 커서 기반 페이지네이션(옵션)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusHistory"

  /api/fire_log:
    get:
      tags: [Fire]
      summary: 화재 경보 로그 조회
      description: 화재 감지 이력을 조회합니다.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FireLogItem"

  /api/fire_alert:
    post:
      tags: [Fire]
      summary: (젯슨) 3조건 충족 화재 감지 보고
      description: 서버가 DB 저장 후 WebSocket으로 `fire_alert` 푸시(프론트 팝업).
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/FireTrigger" }
      responses:
        "200":
          description: broadcast OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }

  /api/manual_alert:
    post:
      tags: [Fire]
      summary: (젯슨) 2조건 충족 수동 투하 요청
      description: 서버가 WebSocket으로 `manual_alert` 전송(프론트 ‘투하하기’ 확인).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                reason: { type: string, description: "예: 가스+IR" }
                gas: { type: number }
                ir: { type: number }
                yolo: { type: boolean, default: false }
                ts: { type: string, format: date-time }
              required: [ts]
      responses:
        "200":
          description: broadcast OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }

  /api/drop:
    post:
      tags: [Action]
      summary: 소화탄 수동 투하 명령
      description: 프론트 모달에서 ‘투하하기’ 클릭 시 호출. 성공 시 WebSocket `drop_ack`(옵션).
      responses:
        "200":
          description: 투하 명령 전달 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DropResponse"
        "500":
          description: 장치 오류
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /api/health:
    get:
      tags: [System]
      summary: 서버/DB 헬스체크
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ok" }

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:
    Status:
      type: object
      additionalProperties: false
      properties:
        ts:       { type: string, format: date-time }
        gas:      { type: number, description: "MQ-2 가스(ppm)" }
        temp:     { type: number, description: "IR 온도(°C)" }
        altitude: { type: number, description: "고도(m)" }
        battery:  { type: number, description: "배터리 잔량(%)" }
        lat:      { type: number }
        lon:      { type: number }
      required: [ts, altitude, battery]

    StatusIngest:
      allOf:
        - $ref: "#/components/schemas/Status"
      description: 젯슨이 업로드 시 gas/temp/lat/lon은 선택값 허용 (배포 환경 유연성)

    StatusHistory:
      type: object
      additionalProperties: false
      properties:
        items:
          type: array
          items: { $ref: "#/components/schemas/Status" }
        nextCursor:
          type: string
          nullable: true
      required: [items]

    FireLogItem:
      type: object
      additionalProperties: false
      properties:
        ts:        { type: string, format: date-time }
        conditions:{ type: string, description: "예: 3개 조건 충족 / 2개 조건(가스+IR)" }
        gas:       { type: number }
        ir:        { type: number }
        yolo:      { type: boolean }
        action:
          type: string
          enum: ["자동 투하", "수동 투하", "알림"]
        lat:        { type: number }
        lon:        { type: number }
      required: [ts, conditions]

    FireTrigger:
      type: object
      additionalProperties: false
      properties:
        ts:   { type: string, format: date-time }
        gas:  { type: number }
        ir:   { type: number }
        yolo: { type: boolean }
        lat:  { type: number }
        lon:  { type: number }
      required: [ts]

    DropResponse:
      type: object
      additionalProperties: false
      properties:
        status:    { type: string, enum: [success] }
        message:   { type: string }
        timestamp: { type: string, format: date-time }
      required: [status, message, timestamp]

    Ok:
      type: object
      properties:
        ok: { type: boolean, default: true }
      required: [ok]

    ErrorResponse:
      type: object
      properties:
        status:    { type: string, enum: [error] }
        message:   { type: string }
        timestamp: { type: string, format: date-time }
      required: [status, message, timestamp]
